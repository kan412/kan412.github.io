1. Create an index which will be used by this query and provide proof (from explain() or Compass UI) that the index is indeed used by the winning plan: 
  db.restaurants.find({ name: "Glorious Food" })

  Query:
  db.restaurants.createIndex({ name: 1 });
  db.restaurants.find({ name: "Glorious Food"}).explain();
  
  Result:
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "name" : {
                                "$eq" : "Glorious Food"
                        }
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "name" : 1
                                },
                                "indexName" : "name_1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "name" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "name" : [
                                                "[\"Glorious Food\", \"Glorious Food\"]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-RMP1IV7",
                "port" : 27017,
                "version" : "4.0.9",
                "gitVersion" : "fc525e2d9b0e4bceff5c2201457e564362909765"
        },
        "ok" : 1
}

2. Drop index from task 4.1 

Query:
db.restaurants.dropIndex({ name: 1 });

Result:
{ "nIndexesWas" : 2, "ok" : 1 }

3. Create an index to make this query covered and provide proof (from explain() or Compass UI) that it is indeed covered: 
db.restaurants.find({ restaurant_id: "41098650" }, { _id: 0, borough: 1 })


Query:
db.restaurants.createIndex({ restaurant_id:1});
db.restaurants.find({ restaurant_id: "41098650" }, { _id: 0, borough: 1 }).explain();


 Result: 


{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "restaurant_id" : {
                                "$eq" : "41098650"
                        }
                },
                "winningPlan" : {
                        "stage" : "PROJECTION",
                        "transformBy" : {
                                "_id" : 0,
                                "borough" : 1
                        },
                        "inputStage" : {
                                "stage" : "FETCH",
                                "inputStage" : {
                                        "stage" : "IXSCAN",
                                        "keyPattern" : {
                                                "restaurant_id" : 1
                                        },
                                        "indexName" : "restaurant_id_1",
                                        "isMultiKey" : false,
                                        "multiKeyPaths" : {
                                                "restaurant_id" : [ ]
                                        },
                                        "isUnique" : false,
                                        "isSparse" : false,
                                        "isPartial" : false,
                                        "indexVersion" : 2,
                                        "direction" : "forward",
                                        "indexBounds" : {
                                                "restaurant_id" : [
                                                        "[\"41098650\", \"41098650\"]"
                                                ]
                                        }
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-RMP1IV7",
                "port" : 27017,
                "version" : "4.0.9",
                "gitVersion" : "fc525e2d9b0e4bceff5c2201457e564362909765"
        },
        "ok" : 1
}


4. Create a partial index on cuisine field which will be used only when filtering on borough equal to “Staten Island”: 
db.restaurants.find({ borough: "Staten Island", cuisine: "American" }) – uses index 
db.restaurants.find({ borough: "Staten Island", name: "Bagel Land" }) – does not use index 
db.restaurants.find({ borough: "Queens", cuisine: "Pizza" }) – does not use index 


Query:

db.restaurants.createIndex({ cuisine: 1 }, { partialFilterExpression: { borough: { $eq : 'Staten Island' } }});

Result:
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 2,
        "numIndexesAfter" : 3,
        "ok" : 1
}

5. Create an index to make query from task 3.4 covered and provide proof (from explain() or Compass UI) that it is indeed covered 
( What are the names of the restaurants which have a grade at index 8 with score less then 7? Use projection to include only names without _id. )

Query: 
db.restaurants.createIndex({ 'grades.8.score': 1, 'name': -1}, { partialFilterExpression: { 'grades.8.score': { $lt: 7 }}});
db.restaurants.find({ "grades.8.score" :{ $lt : 7 }},{_id:0, name:1}).explain();

Result: 

{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "frontcamp.restaurants",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "grades.8.score" : {
                                "$lt" : 7
                        }
                },
                "winningPlan" : {
                        "stage" : "PROJECTION",
                        "transformBy" : {
                                "_id" : 0,
                                "name" : 1
                        },
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "grades.8.score" : 1,
                                        "name" : -1
                                },
                                "indexName" : "grades.8.score_1_name_-1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "grades.8.score" : [ ],
                                        "name" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : true,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "grades.8.score" : [
                                                "[-inf.0, 7.0)"
                                        ],
                                        "name" : [
                                                "[MaxKey, MinKey]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "DESKTOP-RMP1IV7",
                "port" : 27017,
                "version" : "4.0.9",
                "gitVersion" : "fc525e2d9b0e4bceff5c2201457e564362909765"
        },
        "ok" : 1
}






